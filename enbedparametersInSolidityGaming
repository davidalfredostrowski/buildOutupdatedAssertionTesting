Sure, to interact with a payable Solidity smart contract using Hardhat, you'll typically follow these steps:

1. **Write or Use an Existing Smart Contract**: Ensure your Solidity smart contract has a payable function that can receive Ether and potentially transfer it between accounts.

2. **Set Up Hardhat Project**: Make sure you have a Hardhat project set up with the necessary configurations and dependencies installed.

3. **Write a Script to Interact with the Contract**: Create a script (e.g., `interact.js` or `interact.ts` depending on whether you're using JavaScript or TypeScript) in your Hardhat project to interact with the contract.

Hereâ€™s a basic example:

### Solidity Smart Contract

```solidity
// ExamplePayableContract.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract ExamplePayableContract {
    event FundsReceived(address indexed sender, uint amount);
    event FundsWithdrawn(address indexed recipient, uint amount);

    function receiveFunds() external payable {
        emit FundsReceived(msg.sender, msg.value);
    }

    function withdrawFunds(address payable recipient, uint amount) external {
        require(amount <= address(this).balance, "Insufficient balance");
        recipient.transfer(amount);
        emit FundsWithdrawn(recipient, amount);
    }
}
```

### Hardhat Script (`interact.js`)

```javascript
// interact.js
async function main() {
  const [deployer] = await ethers.getSigners();

  console.log("Deploying contracts with the account:", deployer.address);

  const Contract = await ethers.getContractFactory("ExamplePayableContract");
  const contract = await Contract.deploy();
  console.log("Contract deployed to address:", contract.address);

  // Send funds to the contract
  const amountToSend = ethers.utils.parseEther("1.0"); // 1 ETH
  await deployer.sendTransaction({
    to: contract.address,
    value: amountToSend
  });

  // Call the payable function
  await contract.connect(deployer).receiveFunds({
    value: ethers.utils.parseEther("0.5") // 0.5 ETH
  });

  // Example: withdraw funds from the contract
  const recipientAddress = "<recipient-address>"; // Replace with actual recipient address
  await contract.connect(deployer).withdrawFunds(recipientAddress, ethers.utils.parseEther("0.3")); // Withdraw 0.3 ETH

  console.log("Transaction complete");
}

main()
  .then(() => process.exit(0))
  .catch((error) => {
    console.error(error);
    process.exit(1);
  });
```

### Explanation

- **Deploying and Funding**: The script deploys the contract and sends Ether to it using `deployer.sendTransaction`.
- **Calling Payable Function**: It then calls the `receiveFunds` function on the contract, sending 0.5 ETH to it.
- **Withdrawing Funds**: Finally, it calls the `withdrawFunds` function to withdraw 0.3 ETH to a specified recipient address.

### Running the Script

To run this script using Hardhat, save it in your project directory and execute:

```bash
npx hardhat run scripts/interact.js
```

Replace `"ExamplePayableContract"` with the actual name of your Solidity contract file. Adjust amounts and addresses as needed for your specific use case.
