--> contracts/ExamplePayableContract.sol


Compiled 1 Solidity file successfully (evm target: paris).
Welcome to Node.js v18.19.1.
Type ".help" for more information.
> const signers = await ethers.getSigners();
undefined
> signers
[
  HardhatEthersSigner {
    _gasLimit: 30000000,
    address: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',
    provider: HardhatEthersProvider {
      _hardhatProvider: [LazyInitializationProviderAdapter],
      _networkName: 'localhost',
      _blockListeners: [],
      _transactionHashListeners: Map(0) {},
      _eventListeners: []
    }
  },
  HardhatEthersSigner {
    _gasLimit: 30000000,
    address: '0x70997970C51812dc3A010C7d01b50e0d17dc79C8',
    provider: HardhatEthersProvider {
      _hardhatProvider: [LazyInitializationProviderAdapter],
      _networkName: 'localhost',
      _blockListeners: [],
      _transactionHashListeners: Map(0) {},
      _eventListeners: []
    }
  },
  HardhatEthersSigner {
    _gasLimit: 30000000,
    address: '0x3C44CdDdB6a900fa2b585dd299e03d12FA4293BC',
    provider: HardhatEthersProvider {
      _hardhatProvider: [LazyInitializationProviderAdapter],
      _networkName: 'localhost',
      _blockListeners: [],
      _transactionHashListeners: Map(0) {},
      _eventListeners: []
    }
  },
  HardhatEthersSigner {
    _gasLimit: 30000000,
    address: '0x90F79bf6EB2c4f870365E785982E1f101E93b906',
    provider: HardhatEthersProvider {
      _hardhatProvider: [LazyInitializationProviderAdapter],
      _networkName: 'localhost',
      _blockListeners: [],
      _transactionHashListeners: Map(0) {},
      _eventListeners: []
    }
  },
  HardhatEthersSigner {
    _gasLimit: 30000000,
    address: '0x15d34AAf54267DB7D7c367839AAf71A00a2C6A65',
    provider: HardhatEthersProvider {
      _hardhatProvider: [LazyInitializationProviderAdapter],
      _networkName: 'localhost',
      _blockListeners: [],
      _transactionHashListeners: Map(0) {},
      _eventListeners: []
    }
  },
  HardhatEthersSigner {
    _gasLimit: 30000000,
    address: '0x9965507D1a55bcC2695C58ba16FB37d819B0A4dc',
    provider: HardhatEthersProvider {
      _hardhatProvider: [LazyInitializationProviderAdapter],
      _networkName: 'localhost',
      _blockListeners: [],
      _transactionHashListeners: Map(0) {},
      _eventListeners: []
    }
  },
  HardhatEthersSigner {
    _gasLimit: 30000000,
    address: '0x976EA74026E726554dB657fA54763abd0C3a0aa9',
    provider: HardhatEthersProvider {
      _hardhatProvider: [LazyInitializationProviderAdapter],
      _networkName: 'localhost',
      _blockListeners: [],
      _transactionHashListeners: Map(0) {},
      _eventListeners: []
    }
  },
  HardhatEthersSigner {
    _gasLimit: 30000000,
    address: '0x14dC79964da2C08b23698B3D3cc7Ca32193d9955',
    provider: HardhatEthersProvider {
      _hardhatProvider: [LazyInitializationProviderAdapter],
      _networkName: 'localhost',
      _blockListeners: [],
      _transactionHashListeners: Map(0) {},
      _eventListeners: []
    }
  },
  HardhatEthersSigner {
    _gasLimit: 30000000,
    address: '0x23618e81E3f5cdF7f54C3d65f7FBc0aBf5B21E8f',
    provider: HardhatEthersProvider {
      _hardhatProvider: [LazyInitializationProviderAdapter],
      _networkName: 'localhost',
      _blockListeners: [],
      _transactionHashListeners: Map(0) {},
      _eventListeners: []
    }
  },
  HardhatEthersSigner {
    _gasLimit: 30000000,
    address: '0xa0Ee7A142d267C1f36714E4a8F75612F20a79720',
    provider: HardhatEthersProvider {
      _hardhatProvider: [LazyInitializationProviderAdapter],
      _networkName: 'localhost',
      _blockListeners: [],
      _transactionHashListeners: Map(0) {},
      _eventListeners: []
    }
  },
  HardhatEthersSigner {
    _gasLimit: 30000000,
    address: '0xBcd4042DE499D14e55001CcbB24a551F3b954096',
    provider: HardhatEthersProvider {
      _hardhatProvider: [LazyInitializationProviderAdapter],
      _networkName: 'localhost',
      _blockListeners: [],
      _transactionHashListeners: Map(0) {},
      _eventListeners: []
    }
  },
  HardhatEthersSigner {
    _gasLimit: 30000000,
    address: '0x71bE63f3384f5fb98995898A86B02Fb2426c5788',
    provider: HardhatEthersProvider {
      _hardhatProvider: [LazyInitializationProviderAdapter],
      _networkName: 'localhost',
      _blockListeners: [],
      _transactionHashListeners: Map(0) {},
      _eventListeners: []
    }
  },
  HardhatEthersSigner {
    _gasLimit: 30000000,
    address: '0xFABB0ac9d68B0B445fB7357272Ff202C5651694a',
    provider: HardhatEthersProvider {
      _hardhatProvider: [LazyInitializationProviderAdapter],
      _networkName: 'localhost',
      _blockListeners: [],
      _transactionHashListeners: Map(0) {},
      _eventListeners: []
    }
  },
  HardhatEthersSigner {
    _gasLimit: 30000000,
    address: '0x1CBd3b2770909D4e10f157cABC84C7264073C9Ec',
    provider: HardhatEthersProvider {
      _hardhatProvider: [LazyInitializationProviderAdapter],
      _networkName: 'localhost',
      _blockListeners: [],
      _transactionHashListeners: Map(0) {},
      _eventListeners: []
    }
  },
  HardhatEthersSigner {
    _gasLimit: 30000000,
    address: '0xdF3e18d64BC6A983f673Ab319CCaE4f1a57C7097',
    provider: HardhatEthersProvider {
      _hardhatProvider: [LazyInitializationProviderAdapter],
      _networkName: 'localhost',
      _blockListeners: [],
      _transactionHashListeners: Map(0) {},
      _eventListeners: []
    }
  },
  HardhatEthersSigner {
    _gasLimit: 30000000,
    address: '0xcd3B766CCDd6AE721141F452C550Ca635964ce71',
    provider: HardhatEthersProvider {
      _hardhatProvider: [LazyInitializationProviderAdapter],
      _networkName: 'localhost',
      _blockListeners: [],
      _transactionHashListeners: Map(0) {},
      _eventListeners: []
    }
  },
  HardhatEthersSigner {
    _gasLimit: 30000000,
    address: '0x2546BcD3c84621e976D8185a91A922aE77ECEc30',
    provider: HardhatEthersProvider {
      _hardhatProvider: [LazyInitializationProviderAdapter],
      _networkName: 'localhost',
      _blockListeners: [],
      _transactionHashListeners: Map(0) {},
      _eventListeners: []
    }
  },
  HardhatEthersSigner {
    _gasLimit: 30000000,
    address: '0xbDA5747bFD65F08deb54cb465eB87D40e51B197E',
    provider: HardhatEthersProvider {
      _hardhatProvider: [LazyInitializationProviderAdapter],
      _networkName: 'localhost',
      _blockListeners: [],
      _transactionHashListeners: Map(0) {},
      _eventListeners: []
    }
  },
  HardhatEthersSigner {
    _gasLimit: 30000000,
    address: '0xdD2FD4581271e230360230F9337D5c0430Bf44C0',
    provider: HardhatEthersProvider {
      _hardhatProvider: [LazyInitializationProviderAdapter],
      _networkName: 'localhost',
      _blockListeners: [],
      _transactionHashListeners: Map(0) {},
      _eventListeners: []
    }
  },
  HardhatEthersSigner {
    _gasLimit: 30000000,
    address: '0x8626f6940E2eb28930eFb4CeF49B2d1F2C9C1199',
    provider: HardhatEthersProvider {
      _hardhatProvider: [LazyInitializationProviderAdapter],
      _networkName: 'localhost',
      _blockListeners: [],
      _transactionHashListeners: Map(0) {},
      _eventListeners: []
    }
  }
]
> const signers = await ethers.getSigners();
Uncaught SyntaxError: Identifier 'signers' has already been declared
>  const contract =  await ethers.getContractFactory("ExamplePayableContract")
undefined
> const cd = await contract.deploy()
undefined
> cd
BaseContract {
  target: '0x5FbDB2315678afecb367f032d93F642f64180aa3',
  interface: Interface {
    fragments: [
      [EventFragment],
      [EventFragment],
      [FunctionFragment],
      [FunctionFragment]
    ],
    deploy: ConstructorFragment {
      type: 'constructor',
      inputs: [],
      payable: false,
      gas: null
    },
    fallback: null,
    receive: false
  },
  runner: HardhatEthersSigner {
    _gasLimit: 30000000,
    address: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',
    provider: HardhatEthersProvider {
      _hardhatProvider: [LazyInitializationProviderAdapter],
      _networkName: 'localhost',
      _blockListeners: [],
      _transactionHashListeners: Map(0) {},
      _eventListeners: []
    }
  },
  filters: {},
  fallback: null,
  [Symbol(_ethersInternal_contract)]: {}
}
> cd.address
undefined
> cd.target
'0x5FbDB2315678afecb367f032d93F642f64180aa3'
> const bal2 = await ethers.provider.getBalance(cd.target)
undefined
> bal2
0n
> const [deployer] - await ethers.getSigners();
const [deployer] - await ethers.getSigners();
      ^^^^^^^^^^

Uncaught SyntaxError: Missing initializer in destructuring declaration
> const [deployer] = await ethers.getSigners();
undefined
> deployer
HardhatEthersSigner {
  _gasLimit: 30000000,
  address: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',
  provider: HardhatEthersProvider {
    _hardhatProvider: LazyInitializationProviderAdapter {
      _providerFactory: [AsyncFunction (anonymous)],
      _emitter: [EventEmitter],
      _initializingPromise: [Promise],
      provider: [BackwardsCompatibilityProviderAdapter]
    },
    _networkName: 'localhost',
    _blockListeners: [],
    _transactionHashListeners: Map(0) {},
    _eventListeners: []
  }
}
> cd.address
undefined
>   await deployer.sendTransaction({  to: contract.target,  value: amountToSend  });
Uncaught ReferenceError: amountToSend is not defined
    at REPL79:1:98
> const amountToSend = ethers.utils.parseEther("1.0"); // 1 ETHers
Uncaught TypeError: Cannot read properties of undefined (reading 'parseEther')
> const amountToSend = ethers.parseEther("1.0"); // 1 ETHers
Uncaught SyntaxError: Identifier 'amountToSend' has already been declared
> const amountToSend2 = ethers.parseEther("1.0"); // 1 ETHers
undefined
> amountToSend2
1000000000000000000n
>
 

>  await deployer.sendTransaction({  to: cd.target,  value: amountToSend2  });
Uncaught ProviderError: Error: Transaction reverted without a reason string
    at HttpProvider.request (/home/ubuntu/testPayable/node_modules/hardhat/src/internal/core/providers/http.ts:96:21)
    at processTicksAndRejections (node:internal/process/task_queues:95:5)
    at HardhatEthersSigner.sendTransaction (/home/ubuntu/testPayable/node_modules/@nomicfoundation/hardhat-ethers/src/signers.ts:125:18)
    at REPL86:1:34
    at node:repl:641:29
> const bal2 = await ethers.provider.getBalance(cd.target)
Uncaught SyntaxError: Identifier 'bal2' has already been declared
>  await ethers.provider.getBalance(cd.target)
0n
> cd.receiveFunds({value.parseEther("0.5")})
cd.receiveFunds({value.parseEther("0.5")})
                      ^

Uncaught SyntaxError: Unexpected token '.'
> cd.receiveFunds({value: ethers.parseEther("0.5")})
Promise {
  <pending>,
  [Symbol(async_id_symbol)]: 6640,
  [Symbol(trigger_async_id_symbol)]: 14
}
> await ethers.provider.getBalance(cd.target)
500000000000000000n
> cd.receiveFunds({value: ethers.parseEther("2.5")})
Promise {
  <pending>,
  [Symbol(async_id_symbol)]: 7157,
  [Symbol(trigger_async_id_symbol)]: 14
}
> await ethers.provider.getBalance(cd.target)
3000000000000000000n
>


> cd.receiveFunds({value: ethers.parseEther("0.5")})
Promise {
  <pending>,
  [Symbol(async_id_symbol)]: 6640,
  [Symbol(trigger_async_id_symbol)]: 14
}
> await ethers.provider.getBalance(cd.target)
500000000000000000n
> cd.receiveFunds({value: ethers.parseEther("2.5")})
Promise {
  <pending>,
  [Symbol(async_id_symbol)]: 7157,
  [Symbol(trigger_async_id_symbol)]: 14
}
> await ethers.provider.getBalance(cd.target)
3000000000000000000n
> await ethers.provider.getBalance(signers[0])
9996999685407750569509n
> await ethers.provider.getBalance(signers[1])
10000000000000000000000n
> await ethers.provider.getBalance(signers[3])
10000000000000000000000n
> cd.receiveFunds({value: ethers.parseEther("5.5")})
Promise {
  <pending>,
  [Symbol(async_id_symbol)]: 8255,
  [Symbol(trigger_async_id_symbol)]: 14
}
> await ethers.provider.getBalance(cd.target)
8500000000000000000n
> await ethers.provider.getBalance(signers[0])
9991499670615022148112n
> cd.withdrawFunds(signers[1], ethers.parseEther("2.0"))
Promise {
  <pending>,
  [Symbol(async_id_symbol)]: 8883,
  [Symbol(trigger_async_id_symbol)]: 14
}
> await cd.withdrawFunds(signers[1], ethers.parseEther("2.0"))
ContractTransactionResponse {
  provider: HardhatEthersProvider {
    _hardhatProvider: LazyInitializationProviderAdapter {
      _providerFactory: [AsyncFunction (anonymous)],
      _emitter: [EventEmitter],
      _initializingPromise: [Promise],
      provider: [BackwardsCompatibilityProviderAdapter]
    },
    _networkName: 'localhost',
    _blockListeners: [],
    _transactionHashListeners: Map(0) {},
    _eventListeners: []
  },
  blockNumber: 7,
  blockHash: '0xb53fdc24f3b97b36fdeb26e82a02d32dbaed8b98d1e0b7818ea757b556d43842',
  index: undefined,
  hash: '0xc2c85713b3d0bdfe2b15d581050e653619ce70c811ed79e869261799e5f3ab42',
  type: 2,
  to: '0x5FbDB2315678afecb367f032d93F642f64180aa3',
  from: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',
  nonce: 6,
  gasLimit: 30000000n,
  gasPrice: 498689557n,
  maxPriorityFeePerGas: 119577246n,
  maxFeePerGas: 498689557n,
  maxFeePerBlobGas: null,
  data: '0xc107532900000000000000000000000070997970c51812dc3a010c7d01b50e0d17dc79c80000000000000000000000000000000000000000000000001bc16d674ec80000',
  value: 0n,
  chainId: 31337n,
  signature: Signature { r: "0x25002aff00569b902b4537dc2b68bba9f42ab935314b25f8bdfe4b9ed5f7e74c", s: "0x0bf44e374685a910a0d947f93d1d0e0e2b2952272848555543591560f4bce4f0", yParity: 0, networkV: null },
  accessList: [],
  blobVersionedHashes: null
}
> await ethers.provider.getBalance(signers[1])
10004000000000000000000n
>

> const balance2 = await ethers.provider.getBalance(signers[2])
undefined
> balance2
10000000000000000000000n
> await cd.withdrawFunds(signers[2], ethers.parseEther("2.0"))
ContractTransactionResponse {
  provider: HardhatEthersProvider {
    _hardhatProvider: LazyInitializationProviderAdapter {
      _providerFactory: [AsyncFunction (anonymous)],
      _emitter: [EventEmitter],
      _initializingPromise: [Promise],
      provider: [BackwardsCompatibilityProviderAdapter]
    },
    _networkName: 'localhost',
    _blockListeners: [],
    _transactionHashListeners: Map(0) {},
    _eventListeners: []
  },
  blockNumber: 8,
  blockHash: '0xa9a61f70081520b869e0161434ee870843a5070e332a788965727f57b5706dc4',
  index: undefined,
  hash: '0x370f545926bc9d822a0ee34ae6c0e5790574759959396d21256ccb0ecdb8da1a',
  type: 2,
  to: '0x5FbDB2315678afecb367f032d93F642f64180aa3',
  from: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',
  nonce: 7,
  gasLimit: 30000000n,
  gasPrice: 436491612n,
  maxPriorityFeePerGas: 104663240n,
  maxFeePerGas: 436491612n,
  maxFeePerBlobGas: null,
  data: '0xc10753290000000000000000000000003c44cdddb6a900fa2b585dd299e03d12fa4293bc0000000000000000000000000000000000000000000000001bc16d674ec80000',
  value: 0n,
  chainId: 31337n,
  signature: Signature { r: "0xac13ed3ceaf62786bafedfbed8133c4f3c04855c0df08df1583e29739d22988b", s: "0x302c5986426f199d44b2052540f8f753a04551991eaf97959513ea557f34a412", yParity: 1, networkV: null },
  accessList: [],
  blobVersionedHashes: null
}
> const balance2new = await ethers.provider.getBalance(signers[2])
undefined
> balance2new
10002000000000000000000n
> assert.equal(prebalanceInEther, ( postBalanceInEther + 10 ), 'the amount will have decreased by 10 either')
Uncaught ReferenceError: prebalanceInEther is not defined
> assert.equal((balance2 + ethers.parseEther("2.0")), (balance2new ), 'the amount will have increased by 2 ether')
undefined
> const output = assert.equal((balance2 + ethers.parseEther("2.0")), (balance2new ), 'the amount will have increased by 2 ether')
undefined
> output
undefined
> const output = assert.equal((balance2 + ethers.parseEther("2.0")), (balance2new ), 'the amount will have increased by 2 ether')
Uncaught SyntaxError: Identifier 'output' has already been declared
> assert.equal((balance2 + ethers.parseEther("2.0")), (balance2new ), 'the amount will have increased by 2 ether')
undefined
> assert.equal((balance2 + ethers.parseEther("3.0")), (balance2new ), 'the amount will have increased by 2 ether')
Uncaught AssertionError [ERR_ASSERTION]: the amount will have increased by 2 ether
    at REPL269:1:8
    at Script.runInThisContext (node:vm:122:12)
    at REPLServer.defaultEval (node:repl:594:29)
    at bound (node:domain:433:15)
    at REPLServer.runBound [as eval] (node:domain:444:12)
    at REPLServer.onLine (node:repl:924:10)
    at REPLServer.emit (node:events:529:35)
    at REPLServer.emit (node:domain:489:12)
    at REPLServer.[_onLine] [as _onLine] (node:internal/readline/interface:423:12)
    at REPLServer.[_line] [as _line] (node:internal/readline/interface:894:18) {
  generatedMessage: false,
  code: 'ERR_ASSERTION',
  actual: 10003000000000000000000n,
  expected: 10002000000000000000000n,
  operator: '=='
}
> assert.equal((balance2 + ethers.parseEther("2.0")), (balance2new ), 'the amount will have increased by 2 ether')
undefined
>









 await deployer.sendTransaction({  to: contract.target,  value: amountToSend  });
