https://ethereum.stackexchange.com/questions/113716/send-and-transfer-are-only-available-for-objects-of-type-address-payable

https://ethereum.stackexchange.com/questions/102346/transfer-only-available-for-objects-of-type-address-payable-not-address


https://ethereum.stackexchange.com/questions/87153/typeerror-send-and-transfer-are-only-available-for-objects-of-type-address


https://ethereum.stackexchange.com/questions/78667/getting-typeerror-send-and-transfer-are-only-available-for-objects-of-type






Compiled 1 Solidity file successfully (evm target: paris).
Welcome to Node.js v18.19.1.
Type ".help" for more information.
> const signers = await ethers.getSigners();
undefined
> await ethers.provider.getBalance("0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266")
10000000000000000000000n
>  const contract =  await ethers.getContractFactory("Gaming")
undefined
> contract
ContractFactory {
  interface: Interface {
    fragments: [
      [ConstructorFragment], [EventFragment],
      [EventFragment],       [EventFragment],
      [EventFragment],       [EventFragment],
      [FunctionFragment],    [FunctionFragment],
      [FunctionFragment],    [FunctionFragment],
      [FunctionFragment],    [FunctionFragment],
      [FunctionFragment],    [FunctionFragment],
      [FunctionFragment],    [FunctionFragment],
      [FunctionFragment],    [FunctionFragment],
      [FunctionFragment],    [FunctionFragment]
    ],
    deploy: ConstructorFragment {
      type: 'constructor',
      inputs: [],
      payable: false,
      gas: null
    },
    fallback: null,
    receive: false
  },
  bytecode: ''... 994 more characters,
  runner: HardhatEthersSigner {
    _gasLimit: 30000000,
    address: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',
    provider: HardhatEthersProvider {
      _hardhatProvider: [LazyInitializationProviderAdapter],
      _networkName: 'localhost',
      _blockListeners: [],
      _transactionHashListeners: Map(0) {},
      _eventListeners: []
    }
  }
}
> const cd = await contract.deploy()
undefined
> cd
BaseContract {
  target: '0x5FbDB2315678afecb367f032d93F642f64180aa3',
  interface: Interface {
    fragments: [
      [ConstructorFragment], [EventFragment],
      [EventFragment],       [EventFragment],
      [EventFragment],       [EventFragment],
      [FunctionFragment],    [FunctionFragment],
      [FunctionFragment],    [FunctionFragment],
      [FunctionFragment],    [FunctionFragment],
      [FunctionFragment],    [FunctionFragment],
      [FunctionFragment],    [FunctionFragment],
      [FunctionFragment],    [FunctionFragment],
      [FunctionFragment],    [FunctionFragment]
    ],
    deploy: ConstructorFragment {
      type: 'constructor',
      inputs: [],
      payable: false,
      gas: null
    },
    fallback: null,
    receive: false
  },
  runner: HardhatEthersSigner {
    _gasLimit: 30000000,
    address: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',
    provider: HardhatEthersProvider {
      _hardhatProvider: [LazyInitializationProviderAdapter],
      _networkName: 'localhost',
      _blockListeners: [],
      _transactionHashListeners: Map(0) {},
      _eventListeners: []
    }
  },
  filters: {},
  fallback: null,
  [Symbol(_ethersInternal_contract)]: {}
}
> cd.mysteryNumber()
Uncaught TypeError: cd.mysteryNumber is not a function
> cd.mysteryNumber()
Uncaught TypeError: cd.mysteryNumber is not a function
> cd.mysteryNumber()
Uncaught TypeError: cd.mysteryNumber is not a function
> cd.getLosses()
Promise {
  <pending>,
  [Symbol(async_id_symbol)]: 3373,
  [Symbol(trigger_async_id_symbol)]: 14
}
> await cd.getLosses()
ContractTransactionResponse {
  provider: HardhatEthersProvider {
    _hardhatProvider: LazyInitializationProviderAdapter {
      _providerFactory: [AsyncFunction (anonymous)],
      _emitter: [EventEmitter],
      _initializingPromise: [Promise],
      provider: [BackwardsCompatibilityProviderAdapter]
    },
    _networkName: 'localhost',
    _blockListeners: [],
    _transactionHashListeners: Map(0) {},
    _eventListeners: []
  },
  blockNumber: 3,
  blockHash: '0x8c986641e35dfeb21ca3913f696b951229e6aea820983c94c38e182e3264e448',
  index: undefined,
  hash: '0x8cc706579bca97774f770e8dffb0d13177dcd5c9d022dc6b42bda02515a2bbca',
  type: 2,
  to: '0x5FbDB2315678afecb367f032d93F642f64180aa3',
  from: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',
  nonce: 2,
  gasLimit: 30000000n,
  gasPrice: 858041016n,
  maxPriorityFeePerGas: 205762685n,
  maxFeePerGas: 858041016n,
  maxFeePerBlobGas: null,
  data: '0x35e1983e',
  value: 0n,
  chainId: 31337n,
  signature: Signature { r: "0x3063eba3e2c3f0bd6de6ff4d56777a1ced19c0c3bfa407e723f4c27aaaf1aa1c", s: "0x70847268bcde20d74dd820db4d2d0a72eee4240859f3b4062ed080ab9b0aca94", yParity: 0, networkV: null },
  accessList: [],
  blobVersionedHashes: null
}
> const a = await cd.getLosses()
undefined
> a
ContractTransactionResponse {
  provider: HardhatEthersProvider {
    _hardhatProvider: LazyInitializationProviderAdapter {
      _providerFactory: [AsyncFunction (anonymous)],
      _emitter: [EventEmitter],
      _initializingPromise: [Promise],
      provider: [BackwardsCompatibilityProviderAdapter]
    },
    _networkName: 'localhost',
    _blockListeners: [],
    _transactionHashListeners: Map(0) {},
    _eventListeners: []
  },
  blockNumber: 4,
  blockHash: '0x82256b7aa1bad7e265aa42736b8b4f87e80f0e1aba8134394ded536bfb79155c',
  index: undefined,
  hash: '0xfaa51e8fd9a3ea47640f084e48de934b86221caf5112a1f9fd3eea5f5ae143ae',
  type: 2,
  to: '0x5FbDB2315678afecb367f032d93F642f64180aa3',
  from: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',
  nonce: 3,
  gasLimit: 30000000n,
  gasPrice: 750954080n,
  maxPriorityFeePerGas: 180082682n,
  maxFeePerGas: 750954080n,
  maxFeePerBlobGas: null,
  data: '0x35e1983e',
  value: 0n,
  chainId: 31337n,
  signature: Signature { r: "0x3b57d5b904ff6bbd84fe3a7b3326a545bebd33527ec0f79ae83add512420ff1c", s: "0x39b4b2fac499af09c3fd96b0d0b7cd304e4381b10882dc88e6b1abba402c01b1", yParity: 0, networkV: null },
  accessList: [],
  blobVersionedHashes: null
}
> const a2 = await cd.getLosses()
undefined
> cd.mysteryNumber
undefined
> const b = cd.mysteryNumber
undefined
> b
undefined
> const b2 = cd.mysteryNumber()
Uncaught TypeError: cd.mysteryNumber is not a function
> cd.winOrLose3(2,true)
Promise {
  <pending>,
  [Symbol(async_id_symbol)]: 5099,
  [Symbol(trigger_async_id_symbol)]: 14
}
> await cd.winOrLose3(2,true)
ContractTransactionResponse {
  provider: HardhatEthersProvider {
    _hardhatProvider: LazyInitializationProviderAdapter {
      _providerFactory: [AsyncFunction (anonymous)],
      _emitter: [EventEmitter],
      _initializingPromise: [Promise],
      provider: [BackwardsCompatibilityProviderAdapter]
    },
    _networkName: 'localhost',
    _blockListeners: [],
    _transactionHashListeners: Map(0) {},
    _eventListeners: []
  },
  blockNumber: 7,
  blockHash: '0x08fcdf528e0e1d2db24413509b3b1fe22fc5e3c515dd7f732c7e027cb34b3394',
  index: undefined,
  hash: '0xf298d0198bfd49137f2f367509d4f4ef3695c43be28d009078c3a29cb764df3f',
  type: 2,
  to: '0x5FbDB2315678afecb367f032d93F642f64180aa3',
  from: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',
  nonce: 6,
  gasLimit: 30000000n,
  gasPrice: 503658358n,
  maxPriorityFeePerGas: 120722424n,
  maxFeePerGas: 503658358n,
  maxFeePerBlobGas: null,
  data: '0x7844a3ba00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000001',
  value: 0n,
  chainId: 31337n,
  signature: Signature { r: "0xeb84d576fd91da60568554c77bc99cbcb13eaa732878229a28fdd7c63902c8ab", s: "0x5c042d45be3ada4a6e4384ed90a5a0556f9c0e45fd730891630a7adc7af8b36d", yParity: 0, networkV: null },
  accessList: [],
  blobVersionedHashes: null
}
> await cd.winOrLose3(12,true)
ContractTransactionResponse {
  provider: HardhatEthersProvider {
    _hardhatProvider: LazyInitializationProviderAdapter {
      _providerFactory: [AsyncFunction (anonymous)],
      _emitter: [EventEmitter],
      _initializingPromise: [Promise],
      provider: [BackwardsCompatibilityProviderAdapter]
    },
    _networkName: 'localhost',
    _blockListeners: [],
    _transactionHashListeners: Map(0) {},
    _eventListeners: []
  },
  blockNumber: 8,
  blockHash: '0x0f1bf3b3c79323f6a0a21b44ce7374d408cd13b1e119eca18e56f70b2439ca5b',
  index: undefined,
  hash: '0x7167c78df3157147383f26486c0879857a960e1968b923fe9fa9677f79523467',
  type: 2,
  to: '0x5FbDB2315678afecb367f032d93F642f64180aa3',
  from: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',
  nonce: 7,
  gasLimit: 30000000n,
  gasPrice: 441011276n,
  maxPriorityFeePerGas: 105706075n,
  maxFeePerGas: 441011276n,
  maxFeePerBlobGas: null,
  data: '0x7844a3ba000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000001',
  value: 0n,
  chainId: 31337n,
  signature: Signature { r: "0xc8f5a1caccc8dd22994f8dfc7d0e4a4d869f07f805998bc4e52d1a2cb5d10550", s: "0x6e7542c66ce2d85fb6ba686ce9f52b088f32a11cda8621bf2ed4e46baee5571e", yParity: 1, networkV: null },
  accessList: [],
  blobVersionedHashes: null
}
> await cd.winOrLose3(0,true)
ContractTransactionResponse {
  provider: HardhatEthersProvider {
    _hardhatProvider: LazyInitializationProviderAdapter {
      _providerFactory: [AsyncFunction (anonymous)],
      _emitter: [EventEmitter],
      _initializingPromise: [Promise],
      provider: [BackwardsCompatibilityProviderAdapter]
    },
    _networkName: 'localhost',
    _blockListeners: [],
    _transactionHashListeners: Map(0) {},
    _eventListeners: []
  },
  blockNumber: 9,
  blockHash: '0x1c7e5de742d73889ee07095b5330970089c1229c3103029b0feb74a275799148',
  index: undefined,
  hash: '0xc56a58e66f313026eac5f2b3d96f72b8f5f8c2b7d57ae4b01bcf76fa916edcda',
  type: 2,
  to: '0x5FbDB2315678afecb367f032d93F642f64180aa3',
  from: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',
  nonce: 8,
  gasLimit: 30000000n,
  gasPrice: 386029360n,
  maxPriorityFeePerGas: 92557922n,
  maxFeePerGas: 386029360n,
  maxFeePerBlobGas: null,
  data: '0x7844a3ba00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001',
  value: 0n,
  chainId: 31337n,
  signature: Signature { r: "0x9e8bd914d617965f759bfad4cd180b9cf5f0c4b50a3074580e130e86559253eb", s: "0x0e5a9d58a167b7de922dd564b2612bf18b49fc29ab97714e07926218fba96f08", yParity: 0, networkV: null },
  accessList: [],
  blobVersionedHashes: null
}
> await cd.winOrLose3(0,true).send({from: this.state.player1 ,value: this.state.web3.utils.toWei(this.state.wager, 'ether')}).then((f) => console.log(f))
Uncaught TypeError: Cannot read properties of undefined (reading 'player1')
    at REPL184:1:84
> const accounts = await web3.eth.getAccounts()
Uncaught ReferenceError: web3 is not defined
    at REPL185:1:30
> import web3
Uncaught [SyntaxError: Unexpected token (1:11)
] {
  pos: 11,
  loc: Position { line: 1, column: 11 },
  raisedAt: 11
}
> require web3
require web3
        ^^^^

Uncaught SyntaxError: Unexpected identifier
> import Web3 from 'web3'
import Web3 from 'web3'
^^^^^^

Uncaught:
SyntaxError: Cannot use import statement inside the Node.js REPL, alternatively use dynamic import: const { default: Web3 } = await import("web3");
> const { default: Web3 } = await import("web3");
undefined
> const accounts = await web3.eth.getAccounts()
Uncaught SyntaxError: Identifier 'accounts' has already been declared
> const accounts2 = await web3.eth.getAccounts()
Uncaught ReferenceError: web3 is not defined
    at REPL191:1:31
> const accounts2 = await Web3.eth.getAccounts()
Uncaught SyntaxError: Identifier 'accounts2' has already been declared
> const accounts3 = await Web3.eth.getAccounts()
Uncaught TypeError: Cannot read properties of undefined (reading 'getAccounts')
    at REPL193:1:64
>
